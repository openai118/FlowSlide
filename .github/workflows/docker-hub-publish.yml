name: Docker Hub Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  release:
    types: [published]
  workflow_dispatch:

env:
  DOCKER_HUB_REGISTRY: docker.io
  IMAGE_NAME: landppt

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          # 为分支生成标签
          type=ref,event=branch
          # 为标签生成版本号
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          # 为main分支生成latest标签
          type=raw,value=latest,enable={{is_default_branch}}
          # 生成时间戳标签
          type=raw,value={{date 'YYYYMMDD'}}-{{sha}}
        labels: |
          org.opencontainers.image.title=LandPPT
          org.opencontainers.image.description=AI-Powered Presentation Generator with PostgreSQL monitoring
          org.opencontainers.image.vendor=LandPPT Team
          
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          
    - name: 📊 Update Docker Hub description
      uses: peter-evans/dockerhub-description@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        repository: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
        short-description: "🚀 AI-Powered Presentation Generator with Universal PostgreSQL Monitoring"
        readme-filepath: ./README.md
        
    - name: 🔍 Test Docker image
      run: |
        echo "🧪 Testing Docker image..."
        docker run --rm \
          ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest \
          python -c "print('✅ Docker image test successful!')"
          
    - name: 📢 Generate summary
      run: |
        echo "## 🐳 Docker Hub Publish Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| 📦 Repository | \`${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏷️ Tags | \`${{ steps.meta.outputs.tags }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Platforms | \`linux/amd64,linux/arm64\` |" >> $GITHUB_STEP_SUMMARY
        echo "| ✅ Status | Published Successfully |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Quick Start" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Pull and run the latest image" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker run -d \\" >> $GITHUB_STEP_SUMMARY
        echo "  --name landppt \\" >> $GITHUB_STEP_SUMMARY
        echo "  -p 8000:8000 \\" >> $GITHUB_STEP_SUMMARY
        echo "  -e DATABASE_URL=your_database_url \\" >> $GITHUB_STEP_SUMMARY
        echo "  ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
