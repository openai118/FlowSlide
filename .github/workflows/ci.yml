# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# Minimal CI workflow for repository
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: flowslide_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[dev]' || pip install -e .

      - name: Lint (non-blocking)
        run: |
          if command -v flake8 >/dev/null 2>&1; then flake8 src/ tests/ --exit-zero || true; fi
          if command -v black >/dev/null 2>&1; then black --check src/ tests/ || true; fi
          if command -v isort >/dev/null 2>&1; then isort --check-only src/ tests/ || true; fi

      - name: Type check (non-blocking)
        run: |
          if command -v mypy >/dev/null 2>&1; then mypy src/flowslide --ignore-missing-imports || true; fi

      - name: Run tests
        env:
          TESTING: true
          SECRET_KEY: test-secret-key-for-ci
          EXTERNAL_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flowslide_test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flowslide_test
        run: |
          python -m pytest -q --junitxml=test-results.xml --cov=src/flowslide --cov-report=xml

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ matrix.python-version }}
          path: |
            test-results.xml
            coverage.xml
            htmlcov/

  build:
    name: Build and (optionally) Push Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker (if configured)
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: flowslide/app

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy (filesystem scan)
        uses: aquasecurity/trivy-action@v1
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to staging (placeholder)
        run: |
          echo "Deploying to staging..."
          # Add real deploy commands here (kubectl, helm, ssh, etc.)

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to production (placeholder)
        run: |
          echo "Deploying to production..."
          # Add real deploy commands here

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install perf deps
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[dev]' || pip install -e .

      - name: Run performance tests (placeholder)
        run: |
          echo "Run your performance suite here (locust, k6, etc.)"

