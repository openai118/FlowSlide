name: Build and Push Docker Image

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: openai118/flowslide

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Aggressive disk cleanup for CI
      run: |
        echo "🧹 Aggressive disk cleanup for CI environment..."
        
        # 显示初始磁盘使用情况
        echo "Initial disk usage:"
        df -h
        
        # 清理 GitHub Actions 缓存目录
        sudo rm -rf /home/runner/actions-runner/_diag/* || true
        sudo rm -rf /home/runner/actions-runner/_work/_temp/* || true
        
        # 删除不需要的软件包（更激进的清理）
        sudo apt-get remove -y --purge \
          '^dotnet-.*' \
          '^llvm-.*' \
          '^mongodb-.*' \
          '^mysql-.*' \
          azure-cli \
          google-cloud-sdk \
          firefox \
          powershell \
          microsoft-edge-stable \
          google-chrome-stable \
          || true
        
        # 清理包管理器
        sudo apt-get autoremove -y --purge || true
        sudo apt-get autoclean || true
        sudo apt-get clean || true
        
        # 清理 Docker 系统（更激进）
        docker system prune -af --volumes || true
        docker builder prune -af || true
        
        # 清理系统临时文件和缓存
        sudo rm -rf /tmp/* /var/tmp/* || true
        sudo rm -rf /var/cache/apt/archives/* || true
        sudo rm -rf /var/lib/apt/lists/* || true
        sudo rm -rf /usr/share/dotnet || true
        sudo rm -rf /opt/ghc || true
        sudo rm -rf /usr/local/.ghcup || true
        sudo rm -rf /usr/local/share/boost || true
        sudo rm -rf /usr/local/lib/android || true
        sudo rm -rf /opt/hostedtoolcache || true
        
        # 清理 snap 包
        sudo snap list --all | awk '/disabled/{print $1, $3}' | while read snapname revision; do
          sudo snap remove "$snapname" --revision="$revision" || true
        done
        
        echo "Disk usage after aggressive cleanup:"
        df -h

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:v0.12.0
          network=host
        config-inline: |
          [worker.oci]
            max-parallelism = 1
          [worker.containerd]
            max-parallelism = 1

    - name: Intermediate cleanup before build
      run: |
        echo "🧹 Pre-build cleanup..."
        # Clean up any existing Docker resources
        docker system prune -af --volumes || true
        docker builder prune -af || true
        
        # Clean up temporary directories
        sudo rm -rf /tmp/* /var/tmp/* || true
        
        echo "Disk usage before build:"
        df -h

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        # Build for amd64 only to avoid Playwright compatibility issues
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: |
          ${{ steps.meta.outputs.labels }}
          org.opencontainers.image.licenses=Apache-2.0
        # Disable cache completely to save maximum disk space
        # cache-from: type=gha
        # cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=0
          CACHE_BUST=${{ github.sha }}
        # Use smaller build context and aggressive pruning
        outputs: type=docker,dest=/tmp/image.tar
        
    - name: Load and push image
      if: github.event_name != 'pull_request'
      run: |
        # Load the image from tar
        docker load -i /tmp/image.tar
        
        # Push the image
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Clean up the tar file immediately
        rm -f /tmp/image.tar
        
        # Clean up any remaining build cache
        docker builder prune -af || true

    - name: Test Docker image
      if: github.event_name != 'pull_request'
      run: |
        echo "🧪 Testing the built Docker image..."
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python -c "
        import playwright
        print('✅ Playwright import successful')
        "

    - name: Generate deployment summary
      if: github.event_name != 'pull_request'
      run: |
        echo "## Docker Image Built Successfully! 🚀" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Image Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: linux/amd64" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick Start:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker run -p 8000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Clean up after build
      if: always()
      run: |
        echo "🧹 Final cleanup..."
        # Clean up Docker resources
        docker system prune -f || true
        docker builder prune -f || true
        docker image prune -f || true
        
        # Clean up temp files
        sudo rm -rf /tmp/* || true
        sudo rm -rf /var/tmp/* || true
        
        # Show final disk usage
        echo "Final disk usage:"
        df -h
