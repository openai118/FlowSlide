name: Build and Push Docker Image

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: openai118/flowslide

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Clean up disk space
      run: |
        echo "ðŸ§¹ Cleaning up disk space..."
        # Remove unnecessary packages
        sudo apt-get remove -y dotnet-sdk-6.0 dotnet-sdk-7.0 dotnet-sdk-8.0 || true
        sudo apt-get autoremove -y || true
        sudo apt-get clean || true
        
        # Clean up Docker
        docker system prune -f || true
        docker builder prune -f || true
        
        # Remove temp files
        sudo rm -rf /tmp/* || true
        sudo rm -rf /var/tmp/* || true
        
        # Show disk usage
        df -h

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        # Build for amd64 only to avoid Playwright compatibility issues
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: |
          ${{ steps.meta.outputs.labels }}
          org.opencontainers.image.licenses=Apache-2.0
        # Temporarily disable cache to save disk space
        # cache-from: type=gha
        # cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          CACHE_BUST=${{ github.sha }}

    - name: Test Docker image
      if: github.event_name != 'pull_request'
      run: |
        echo "ðŸ§ª Testing the built Docker image..."
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python -c "
        import playwright
        print('âœ… Playwright import successful')
        "

    - name: Generate deployment summary
      if: github.event_name != 'pull_request'
      run: |
        echo "## Docker Image Built Successfully! ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Image Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: linux/amd64" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick Start:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker run -p 8000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Clean up after build
      if: always()
      run: |
        echo "ðŸ§¹ Final cleanup..."
        # Clean up Docker resources
        docker system prune -f || true
        docker builder prune -f || true
        docker image prune -f || true
        
        # Clean up temp files
        sudo rm -rf /tmp/* || true
        sudo rm -rf /var/tmp/* || true
        
        # Show final disk usage
        echo "Final disk usage:"
        df -h
