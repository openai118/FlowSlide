name: Build and Push Docker Image

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: openai118/flowslide

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch emulation)
        uses: docker/setup-qemu-action@v3

      - name: Smart disk cleanup for CI
        run: |
        echo "🧹 Smart disk cleanup for CI environment..."
        
        # 显示初始磁盘使用情况
        echo "Initial disk usage:"
        df -h
        
        # 清理 GitHub Actions 缓存目录
        sudo rm -rf /home/runner/actions-runner/_diag/* || true
        sudo rm -rf /home/runner/actions-runner/_work/_temp/* || true
        
        # 只删除确认不需要的软件包
        # 保留 MySQL/PostgreSQL 客户端（项目支持外部数据库）
        # 保留基础网络工具（Cloudflare R2需要）
        sudo apt-get remove -y --purge \
          '^dotnet-.*' \
          '^llvm-.*' \
          '^mongodb-.*' \
          azure-cli \
          google-cloud-sdk \
          firefox \
          powershell \
          microsoft-edge-stable \
          google-chrome-stable \
          snapd \
          || true
        
        echo "ℹ️  Keeping database clients (MySQL/PostgreSQL) - project supports external databases"
        echo "ℹ️  Keeping network tools - needed for R2 cloud storage functionality"
        echo "ℹ️  Keeping build tools - needed for Python packages compilation"
        
        # 清理包管理器
        sudo apt-get autoremove -y --purge || true
        sudo apt-get autoclean || true
        sudo apt-get clean || true
        
        # 清理 Docker 系统
        docker system prune -af --volumes || true
        docker builder prune -af || true
        
        # 清理系统临时文件和缓存（保守清理）
        sudo rm -rf /tmp/* /var/tmp/* || true
        sudo rm -rf /var/cache/apt/archives/* || true
        sudo rm -rf /usr/share/dotnet || true
        sudo rm -rf /opt/ghc || true
        sudo rm -rf /usr/local/.ghcup || true
        sudo rm -rf /usr/local/share/boost || true
        sudo rm -rf /usr/local/lib/android || true
        # 保留 /opt/hostedtoolcache 中可能需要的工具
        
        # 清理 snap 包（更保守）
        if command -v snap >/dev/null 2>&1; then
          sudo snap list --all | awk '/disabled/{print $1, $3}' | while read snapname revision; do
            sudo snap remove "$snapname" --revision="$revision" || true
          done
        fi
        
        echo "Disk usage after smart cleanup:"
        df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
            network=host
          config-inline: |
            [worker.oci]
              max-parallelism = 1
            [worker.containerd]
              max-parallelism = 1

      - name: Intermediate cleanup before build
        run: |
        echo "🧹 Pre-build cleanup..."
        # Clean up any existing Docker resources
        docker system prune -af --volumes || true
        docker builder prune -af || true
        
        # Clean up temporary directories
        sudo rm -rf /tmp/* /var/tmp/* || true
        
        echo "Disk usage before build:"
        df -h

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}

    # PR: build single-arch amd64 and load locally for tests (no push)
      - name: Build (PR) - amd64 load-only
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true
          tags: flowslide:pr-${{ github.sha }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.licenses=Apache-2.0
          build-args: |
            BUILDKIT_INLINE_CACHE=0
            CACHE_BUST=${{ github.sha }}

    # Push events: build and push multi-arch (amd64 + arm64)
      - name: Build and push (multi-arch)
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.licenses=Apache-2.0
          build-args: |
            BUILDKIT_INLINE_CACHE=0
            CACHE_BUST=${{ github.sha }}
        
  # Note: No explicit load step needed; image is pushed directly when not a PR.

    # Test for PR: run local image
      - name: Test Docker image (PR)
        if: github.event_name == 'pull_request'
        run: |
        echo "🧪 Testing local PR image (amd64)..."
        docker run --rm flowslide:pr-${{ github.sha }} python -c "
        import playwright
        print('✅ Playwright import successful')
        "

    # Test for pushed image: pull and run
      - name: Test Docker image (pushed)
        if: github.event_name != 'pull_request'
        run: |
        echo "🧪 Testing the pushed multi-arch image (this runner pulls amd64 variant)..."
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python -c "
        import playwright
        print('✅ Playwright import successful')
        "

    # Verify multi-arch manifest after push
      - name: Verify multi-arch manifest
        if: github.event_name != 'pull_request'
        run: |
        echo "🔍 Inspecting image manifest for platforms..."
        docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Generate deployment summary
        if: github.event_name != 'pull_request'
        run: |
        echo "## Docker Image Built Successfully! 🚀" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Image Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick Start:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker run -p 8000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Clean up after build
        if: always()
        run: |
        echo "🧹 Final cleanup..."
        # Clean up Docker resources
        docker system prune -f || true
        docker builder prune -f || true
        docker image prune -f || true
        
        # Clean up temp files
        sudo rm -rf /tmp/* || true
        sudo rm -rf /var/tmp/* || true
        
        # Show final disk usage
  echo "Final disk usage:"
  df -h
