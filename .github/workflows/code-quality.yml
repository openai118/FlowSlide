name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# 限制并发运行，避免资源冲突
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Clean up disk space safely
      run: |
        echo "🧹 Safe disk cleanup..."
        
        # 安全的包清理（使用锁机制避免冲突）
        if command -v flock >/dev/null 2>&1; then
          flock -w 300 /var/lib/apt/lists/lock apt-get update || true
          flock -w 300 /var/lib/apt/lists/lock apt-get remove -y dotnet-sdk-6.0 dotnet-sdk-7.0 dotnet-sdk-8.0 || true
          flock -w 300 /var/lib/apt/lists/lock apt-get autoremove -y || true
          flock -w 300 /var/lib/apt/lists/lock apt-get clean || true
        else
          # 如果没有 flock，使用重试机制
          for i in {1..3}; do
            if apt-get remove -y dotnet-sdk-6.0 dotnet-sdk-7.0 dotnet-sdk-8.0; then break; fi
            sleep $((RANDOM % 10 + 5))
          done
          apt-get autoremove -y || true
          apt-get clean || true
        fi
        
        # 安全的临时文件清理（保留最近的文件）
        find /tmp -type f -mtime +1 -delete 2>/dev/null || true
        find /var/tmp -type f -mtime +1 -delete 2>/dev/null || true
        
        # 显示清理结果
        echo "Disk usage after cleanup:"
        df -h

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e . --extra-index-url https://pypi.apryse.com

    - name: Run flake8 (non-blocking)
      run: |
        flake8 src/ tests/ --format=github --exit-zero

    - name: Run black
      run: |
        black --check --diff src/ tests/
        
    - name: Run isort
      run: |
        isort --check-only --diff src/ tests/
        
    - name: Run mypy (non-blocking)
      run: |
        mypy src/flowslide --ignore-missing-imports || true

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Run bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Run semgrep
      run: |
        semgrep --config=auto src/ --json --output=semgrep-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit
        
    - name: Run dependency audit
      run: |
        pip-audit --format=json --output=dependency-audit.json || true
        
    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-audit
        path: dependency-audit.json

  complexity:
    name: Code Complexity
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install complexity tools
      run: |
        python -m pip install --upgrade pip
        pip install radon xenon
        
    - name: Run radon complexity check
      run: |
        radon cc src/ --json > complexity-report.json || true
        radon mi src/ --json > maintainability-report.json || true
        
    - name: Run xenon complexity check
      run: |
        xenon src/ --max-absolute B --max-modules A --max-average A || true
        
    - name: Upload complexity reports
      uses: actions/upload-artifact@v4
      with:
        name: complexity-reports
        path: |
          complexity-report.json
          maintainability-report.json

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install pydocstyle interrogate
        
    - name: Check docstring coverage
      run: |
        interrogate src/ --generate-badge interrogate_badge.svg
        
    - name: Check docstring style
      run: |
        pydocstyle src/ || true
        
    - name: Upload documentation reports
      uses: actions/upload-artifact@v4
      with:
        name: documentation-reports
        path: interrogate_badge.svg

    - name: Clean up reports
      if: always()
      run: |
        echo "🧹 Cleaning up report files..."
        # Clean up generated reports
        rm -f safety-report.json || true
        rm -f bandit-report.json || true
        rm -f semgrep-report.json || true
        rm -f dependency-audit.json || true
        rm -f complexity-report.json || true
        rm -f maintainability-report.json || true
        rm -f interrogate_badge.svg || true
        
        # Clean up pip cache
        pip cache purge || true
        
        # Show disk usage
        df -h
